Now that we've covered the basics, lets jump right into an example.

Project Creation
========================
So we'll click new project, and start a new windows forms app.

I'll call mine DirectShowDemo, you can call yours whatever you want.

And we can just use the latest version of the .NET framework.

Package management
========================
Alright, first we're going to manage our NuGet packages using the Package Manager.

We'll search for "Accord directshow"

and here we can see that under dependencies, there are some other prerequisites we also need.

The convenience of package managing can be seen here, where when we download accord.directshow,
everything else needed to use accord.directshow (the dependencies), are also downloaded.

GUI
=======================
and now lets plop some of the visual elements we'll need onto the GUI.

Let's keep track of elapsed time, and current FPS with two textboxes.
"ElapsedTimeBox" "FPSBox"

And just like in your previous assignments we'll have a device selector

So we'll add a combobox, a "select" button, and then we'll label everything.
"SelectCombo" "SelectButton"

Let's add a picturebox to actually see what we're recording, we can call it 
"PreviewBox"

and lets have a "start" and "stop" button.
"StartButton" "StopButton"

Finally lets have a timer only to update the UI, because everyone here knows how accurate the timer is.
"UITimer"
Alright, that should be everything we need for the GUI side.

Code
======================

So let's start with just adding all of the dependencies we need, and we can see here that the NuGet package
we downloaded earlier can be found using autocomplete

using System;
using System.Drawing;
using System.Windows.Forms;
using Accord.Video.DirectShow;
using Accord.Video;
using System.IO;
using System.Diagnostics;

Right under our Form class we'll add a FilterInfoCollection, which we will use to retrieve devices connected
to our computers which can capture video

        // Collection of available video devices
        private FilterInfoCollection videoDevices;
        
We'll also have an object for interfacing with our selected video capture device
        // Selected video device
        private VideoCaptureDevice videoDevice;
        
And we'll have an output directory to keep things nice and tidy. I'll put mine in the workspace 
of the program, you can put yours wherever you want. The @ quote just forces the backslash to
not be recognized as an escape character.

        // Output directory
        private string outputDir = Environment.CurrentDirectory + @"\output\";

Let's add in some code in the initialization:
We'll ensure we have a nothing in the output directory. Just because when we're testing we dont want to 
save gigabytes of data and waste space.
            try
            {
                Directory.Delete(outputDir);
            }
            catch(DirectoryNotFoundException e)
            {
                Console.WriteLine("No directory to delete");
            }
            
            Directory.CreateDirectory(outputDir);

Then we won't be using ticks for time keeping, but the stopwatch, which should be a bit more accurate.
We'll still use ticks for updating the UI.      

Outside the class initialization we'll need some variables to run the timers
        // Timekeeping vars, stopwatch is more accurate than timer
        private Int64 count = 0;
        private Int64 averageFPSCount = 0;
        private Stopwatch elapsedTimeWatch;
        private Stopwatch fpsWatch;
        
And we can initialize these stopwatches in the initialization
            elapsedTimeWatch = new Stopwatch();
            fpsWatch = new Stopwatch();

Let's go to the GUI and get all the functions we need.

And let's fill out the start and stop buttons first. They'll be pretty simple, just manipulating the timers
and video device.

        private void StartButton_Click(object sender, EventArgs e)
        {
            videoDevice.Start();
            elapsedTimeWatch.Start();
            fpsWatch.Start();
            timer1.Enabled = true;
        }

        private void StopButton_Click(object sender, EventArgs e)
        {
            timer1.Enabled = false;
            videoDevice.Stop();
            
            elapsedTimeWatch.Stop();
            elapsedTimeWatch.Reset();

            fpsWatch.Stop();
            fpsWatch.Reset();
            
            count = 0;
            averageFPSCount = 0;
        }

Cool, lets update our GUI as well:
        private void Timer1_Tick(object sender, EventArgs e)
        {
            // update FPS
            if (fpsWatch.ElapsedMilliseconds >= 500)
            {
                FPSBox.Text = (averageFPSCount * 1000 / fpsWatch.ElapsedMilliseconds).ToString();
                fpsWatch.Restart();
                averageFPSCount = 0;
            }

            // update elapsed time
            ElapsedTimeBox.Text = elapsedTimeWatch.ElapsedMilliseconds.ToString();
        }
        
And get our device selector working
        private void SelectCombo_Click(object sender, EventArgs e)
        {
            // Find all available video devices
            videoDevices = new FilterInfoCollection(FilterCategory.VideoInputDevice);

            SelectCombo.Items.Clear();
            foreach (var item in videoDevices)
            {
                SelectCombo.Items.Add(item.Name);
            }
        }
.;
Over here we'll use a lambda function (think of it as an inline function, and replaces for loops a lot of the time) to
get the camera names

And we'll be doing something interesting, which is to add a new event handler, which will trigger every time the video 
device sends us a new frame.

We'll also add in a try catch just to disable the start/stop buttons if the device isn't working.

        private void SelectButton_Click(object sender, EventArgs e)
        {
            try
            {
                // Using lambda function, find device in videodevices matching name of selected combobox item and extract moniker
                string deviceMoniker = videoDevices.Find(x => x.Name.Contains(SelectCombo.SelectedItem.ToString())).MonikerString;
                videoDevice = new VideoCaptureDevice(deviceMoniker);

                // associate new frame event with event handler defined in utilities section
                videoDevice.NewFrame += new NewFrameEventHandler(FrameHandler);
            }
            catch
            {
                MessageBox.Show("Error, device cannot be selected");
                StartButton.Enabled = false;
                StopButton.Enabled = false;
            }

            StartButton.Enabled = true;
            StopButton.Enabled = true;
        }
        
Finally, we'll actually make our frame handler. So over here we have to be a bit careful
about referencing vs value of the bitmap. We'll make a new bitmap from the frame, and save that.

        private void FrameHandler(object sender, NewFrameEventArgs args)
        {
            // Be careful about using ref vs value of args.Frame, depending
            // on how this is done, program may hog access rights to object
            Bitmap newFrame = new Bitmap(args.Frame);
            string name = outputDir + "capture" + count + ".bmp";
            newFrame.Save(name, System.Drawing.Imaging.ImageFormat.Bmp);
            
            PreviewBox.Image = newFrame;
            averageFPSCount++;
            count++;

            return;
        }
        
using System;
using System.Drawing;
using System.Windows.Forms;
using Accord.Video.DirectShow;
using Accord.Video;
using System.IO;
using System.Diagnostics;

namespace camera_demo
{
    public partial class CameraDemoForm : Form
    {

        // Collection of available video devices
        private FilterInfoCollection videoDevices;
        // Selected video device
        private VideoCaptureDevice videoDevice;
        // Output directory
        private string outputDir = Environment.CurrentDirectory + @"\output\";
        
        // Timekeeping vars, stopwatch is more accurate than timer
        private Int64 count = 0;
        private Int64 averageFPSCount = 0;
        private Stopwatch elapsedTimeWatch;
        private Stopwatch fpsWatch;
        
        public CameraDemoForm()
        {
            InitializeComponent();

            try
            {
                Directory.Delete(outputDir);
            }
            catch(DirectoryNotFoundException e)
            {
                Console.WriteLine("No directory to delete");
            }
            
            Directory.CreateDirectory(outputDir);

            elapsedTimeWatch = new Stopwatch();
            fpsWatch = new Stopwatch();
            
        }

        private void StartButton_Click(object sender, EventArgs e)
        {
            videoDevice.Start();
            elapsedTimeWatch.Start();
            fpsWatch.Start();
            timer1.Enabled = true;
        }

        private void StopButton_Click(object sender, EventArgs e)
        {
            timer1.Enabled = false;
            videoDevice.Stop();
            
            elapsedTimeWatch.Stop();
            elapsedTimeWatch.Reset();

            fpsWatch.Stop();
            fpsWatch.Reset();
            
            count = 0;
            averageFPSCount = 0;
        }

        private void SelectCombo_Click(object sender, EventArgs e)
        {
            // Find first valid video input device (ie. webcam) and assign as videodevice
            videoDevices = new FilterInfoCollection(FilterCategory.VideoInputDevice);

            SelectCombo.Items.Clear();
            foreach (var item in videoDevices)
            {
                SelectCombo.Items.Add(item.Name);
            }
        }

        private void SelectButton_Click(object sender, EventArgs e)
        {
            // Find "Logitech" cameras
            // videoDevice = new VideoCaptureDevice(videoDevices.Find(x => x.Name.Contains("Logitech")).MonikerString);
            try
            {
                // Using lambda function, find device in videodevices matching name of selected combobox item and extract moniker
                string deviceMoniker = videoDevices.Find(x => x.Name.Contains(SelectCombo.SelectedItem.ToString())).MonikerString;
                videoDevice = new VideoCaptureDevice(deviceMoniker);

                // associate new frame event with event handler defined in utilities section
                videoDevice.NewFrame += new NewFrameEventHandler(FrameHandler);
            }
            catch
            {
                MessageBox.Show("Error, device cannot be selected");
                StartButton.Enabled = false;
                StopButton.Enabled = false;
            }

            StartButton.Enabled = true;
            StopButton.Enabled = true;
        }

        private void Timer1_Tick(object sender, EventArgs e)
        {
            // update FPS
            if (fpsWatch.ElapsedMilliseconds >= 500)
            {
                FPSBox.Text = (averageFPSCount * 1000 / fpsWatch.ElapsedMilliseconds).ToString();
                fpsWatch.Restart();
                averageFPSCount = 0;
            }

            // update elapsed time
            ElapsedTimeBox.Text = elapsedTimeWatch.ElapsedMilliseconds.ToString();
        }

        private void FrameHandler(object sender, NewFrameEventArgs args)
        {
            // Be careful about using ref vs value of args.Frame, depending
            // on how this is done, program may hog access rights to object
            Bitmap newFrame = new Bitmap(args.Frame);
            string name = outputDir + "capture" + count + ".bmp";
            newFrame.Save(name, System.Drawing.Imaging.ImageFormat.Bmp);
            
            PreviewBox.Image = newFrame;
            averageFPSCount++;
            count++;

            return;
        }
    }
}
